terraform {
  required_providers {
    panos = {
      source  = "terraform-providers/panos"
      version = ">= 1.6.2"
    }
  }
}

resource "panos_administrative_tag" "consul_nia" {
  name = "consul-nia"
  # vsys    = ""
  # color   = ""
  comment = "Autogenerated resource by Consul NIA using Terraform"
}

resource "panos_application_object" "service" {
  # https://docs.paloaltonetworks.com/pan-os/8-1/pan-os-web-interface-help/objects/objects-applications/applications-overview
  for_each = var.services

  name        = each.value.name
  description = each.value.description
  category    = "business-systems"
  subcategory = "general-business"
  technology  = "client-server"
}

resource "panos_security_rule_group" "service" {
  # Note `panos_security_policy` destroys  existing, non-managed rules. We use
  # `panos_security_rule_group` instead to leave existing rules untouched.

  # https://docs.paloaltonetworks.com/pan-os/9-0/pan-os-admin/policy/security-policy/components-of-a-security-policy-rule.html
  dynamic "rule" {
    for_each = { for k, s in var.services : k => s if length(s.destinations) > 0 }

    content {
      name        = "${rule.value.name} destinations"
      action      = "allow"
      description = "Rule for Consul service ${rule.value.name} to its upstreams"
      tags        = [panos_administrative_tag.consul_nia.name]

      applications          = [rule.value.name]
      source_zones          = ["any"]
      source_addresses      = [for addr in rule.value.addresses : split(":", addr)[0]] # trim port if exists
      source_users          = ["any"]
      hip_profiles          = ["any"]
      destination_zones     = ["any"]
      destination_addresses = [for addr in rule.value.destinations : split(":", addr)[0]]
      services              = ["application-default"]
      categories            = ["any"]
      # add profiles
    }
  }

  dynamic "rule" {
    for_each = { for k, s in var.services : k => s if length(s.sources) > 0 }

    content {
      name        = "${rule.value.name} sources"
      action      = "allow"
      description = "Rule for Consul service ${rule.value.name} as upstreams to other services"
      tags        = [panos_administrative_tag.consul_nia.name]

      applications          = [rule.value.name]
      source_zones          = ["any"]
      source_addresses      = [for addr in rule.value.sources : split(":", addr)[0]]
      source_users          = ["any"]
      hip_profiles          = ["any"]
      destination_zones     = ["any"]
      destination_addresses = [for addr in rule.value.addresses : split(":", addr)[0]]
      services              = ["application-default"]
      categories            = ["any"]
    }
  }
}

variable "services" {
  description = "Consul services monitored by Consul NIA"
  type = map(object({
    # Name of the service
    name = string
    # Description of the service
    description = string
    # List of addresses for instances of the service
    addresses = list(string)
    # List of source addresses that initiates network communcation with
    # the service
    sources = list(string)
    # List of destination addresses that the service initiates network
    # communication with
    destinations = list(string)
  }))
}
